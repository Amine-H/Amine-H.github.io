{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/code-behind-magic-part-1","result":{"data":{"markdownRemark":{"id":"453fd629-7d10-5a06-9ea9-c8aca05b0afc","html":"<p>This post is going to be the first in a series of blog posts called Code Behind the Magic,\nwhere I’ll present some libraries that either make you feel puzzled, grateful or both.</p>\n<p>I’ve used AngularJS when it still was a thing, enjoyed the two-way databinding,\nwhat I enjoyed more was how well the different components, services played together,\nthat aside, I’d like to talk about how handy AngularJS <code class=\"language-text\">$resource</code> was.</p>\n<p><code class=\"language-text\">$resource</code> is an AngularJS service that allowed me to create REST clients as easy as updating a Json Object,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> User <span class=\"token operator\">=</span> <span class=\"token function\">$resource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/:userId'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span><span class=\"token string\">'@id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>that little line will create a service with methods like, <code class=\"language-text\">query</code>, <code class=\"language-text\">get</code>, <code class=\"language-text\">save</code> and <code class=\"language-text\">remove</code>,\nto cast that spell you can do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>userId<span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  user<span class=\"token punctuation\">.</span><span class=\"token function\">$save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>what makes it even better is that you could use it on your controller and do something like this,\nand not worry about no promises.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You might say what’s interesting about this, I’d say <code class=\"language-text\">User.query</code> is not synchronous,\nalthough that syntax might suggest that it is.</p>\n<p>What will happen when you call <code class=\"language-text\">User.query</code> is that it’ll return immediately with an empty array,\nand most importantly keeping a reference to that array, so that it’d populate it with the result when it’s finally here.</p>\n<p>Let’s move to the interesting part, let’s make a clone for <code class=\"language-text\">$resource</code>, just so that we could understand what’s going on under the hood.\nlet me make this point clear, I am not going to make an exact copy of <code class=\"language-text\">$resource</code>, that’s not the point.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">$resource</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> resource <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//usually $resource would add basic functions to this Object such as $save, $remove</span>\n        <span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">$http</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> $promise<span class=\"token operator\">:</span> promise <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> resource <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">$http</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> $promise<span class=\"token operator\">:</span> promise <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//yeah, you can totally add functions to an Array in js</span>\n        <span class=\"token keyword\">return</span> resource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_save</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_resource</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> resource <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> _resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> resource<span class=\"token punctuation\">.</span>id<span class=\"token operator\">?</span> <span class=\"token function\">$http</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">$http</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> $promise<span class=\"token operator\">:</span> promise <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> resource <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">$http</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> $promise<span class=\"token operator\">:</span> promise <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span><span class=\"token operator\">:</span> _get<span class=\"token punctuation\">,</span>\n        query<span class=\"token operator\">:</span> _query<span class=\"token punctuation\">,</span>\n        save<span class=\"token operator\">:</span> _save<span class=\"token punctuation\">,</span>\n        remove<span class=\"token operator\">:</span> _remove<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using our custom <code class=\"language-text\">$resource</code> would be pretty much the same as AngularJS’s, of course it has very little coverage of the actual thing</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Book <span class=\"token operator\">=</span> <span class=\"token function\">$resource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/books/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> book <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//fetch the book with the id=1</span>\nbook<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'Clean Code'</span><span class=\"token punctuation\">;</span>\nbook <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//update the book</span>\nbook <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//remove the book</span></code></pre></div>\n<p>I enjoyed writing this post, and already planning few follow up posts.\nIf you would like me to write something about a library,\nframework that puzzled you just write it in the comment section and I’ll make sure to check it out.</p>","fields":{"slug":"/posts/code-behind-magic-part-1","tagSlugs":["/tag/javascript/"]},"frontmatter":{"date":"2017-10-29T22:40:32.169Z","description":"We'll look into AngularJS's $resource from a different angle.","tags":["javascript"],"title":"Code Behind the Magic - $resource","socialImage":"/media/image-3.jpg"}}},"pageContext":{"slug":"/posts/code-behind-magic-part-1"}}}